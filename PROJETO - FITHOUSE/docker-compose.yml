version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - db_network

  kafka:
    image: apache/kafka-native
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: CONTROLLER://0.0.0.0:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://kafka:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true

  kafka_ui:
    image: provectuslabs/kafka-ui
    container_name: kafka_ui
    depends_on:
      - kafka
    ports:
      - 8080:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=DIETA
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181


  cassandra:
    image: cassandra:latest
    container_name: cassandra_db
    restart: always
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=MyCassandraCluster
      - CASSANDRA_START_RPC=true
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - db_network

  mysql:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: testdb
      MYSQL_USER: user
      MYSQL_PASSWORD: userpass
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - db_network

  mongodb:
    image: mongo:latest
    container_name: mongodb_db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpass
    volumes:
      - mongo_data:/data/db
    networks:
      - db_network

  produtor:
    build:
      context: ./S_servicos
      dockerfile: Dockerfile.produtor
    container_name: s1_produtor
    depends_on:
      - kafka
    networks:
      - db_network

  consumidor:
    restart: always
    build:
      context: ./S_servicos
      dockerfile: Dockerfile.consumidor
    container_name: s2_consumidor
    depends_on:
      - kafka
      - cassandra
      - mysql
      - mongodb
    networks:
      - db_network

  consolidador:
    build:
      context: ./S_servicos
      dockerfile: Dockerfile.consolidador
    container_name: s3_consolidador
    depends_on:
      - kafka
    networks:
      - db_network

networks:
  db_network:
    driver: bridge

volumes:
  cassandra_data:
  mysql_data:
  mongo_data:
