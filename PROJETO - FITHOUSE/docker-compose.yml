services:

  kafka:
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092

  kafka_ui:
    image: provectuslabs/kafka-ui
    container_name: kafka_ui
    depends_on:
      - kafka
    ports:
      - 8080:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=DIETA
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092


  # cassandra:
  #   image: cassandra:latest
  #   container_name: cassandra_db
  #   restart: always
  #   ports:
  #     - "9042:9042"
  #   environment:
  #     - CASSANDRA_CLUSTER_NAME=MyCassandraCluster
  #     - CASSANDRA_START_RPC=true
  #   volumes:
  #     - cassandra_data:/var/lib/cassandra
  #   networks:
  #     - db_network

  # mysql:
  #   image: mysql:8.0
  #   container_name: mysql_db
  #   restart: always
  #   ports:
  #     - "3306:3306"
  #   environment:
  #     MYSQL_ROOT_PASSWORD: rootpass
  #     MYSQL_DATABASE: testdb
  #     MYSQL_USER: user
  #     MYSQL_PASSWORD: userpass
  #   volumes:
  #     - mysql_data:/var/lib/mysql
  #   networks:
  #     - db_network

  # mongodb:
  #   image: mongo:latest
  #   container_name: mongodb_db
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: rootpass
  #   volumes:
  #     - mongo_data:/data/db
  #   networks:
  #     - db_network

  produtor:
    build:
      context: ./S_servicos
      dockerfile: Dockerfile.produtor
    container_name: s1_produtor


  consumidor:
    
    build:
      context: ./S_servicos
      dockerfile: Dockerfile.consumidor
    container_name: s2_consumidor
    restart: always

  consolidador:
    build:
      context: ./S_servicos
      dockerfile: Dockerfile.consolidador
    container_name: s3_consolidador
    restart: always
    depends_on:
      - kafka


volumes:
  cassandra_data:
  mysql_data:
  mongo_data: